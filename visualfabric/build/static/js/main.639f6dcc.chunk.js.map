{"version":3,"sources":["hoc/layout/layout.module.scss","hoc/layout/layout.tsx","store/actions/actionTypes.tsx","store/actions/chain.tsx","containers/Chain.tsx","App.tsx","store/reducers/chain.tsx","index.tsx"],"names":["module","exports","layout","props","className","classes","Layout","children","INIT_CHAIN","SET_BLOCK","loadChain","socket","dispatch","on","res","console","log","type","actionTypes","loadedChain","loadChainAction","connect","state","chain","actions","useDispatch","useEffect","io","app","initState","reducer","action","composeEnhancers","compose","rootReducer","combineReducers","chainReducer","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,yB,kHCiBZC,EAdA,SAACC,GAEZ,OACI,eAAC,WAAD,WACI,qEAGA,sBAAMC,UAAWC,IAAQC,OAAzB,SACKH,EAAMI,e,QCZVC,EAAa,aACbC,EAAY,YCSZC,EAAY,SAACC,GACtB,OAAO,SAACC,GACJD,EAAOE,GAAG,aAAa,SAACC,GACpBC,QAAQC,IAAI,0BACZJ,EAXY,SAACE,GAAD,MACpB,CACIG,KAAMC,EACNC,YAAaL,GAQAM,CAAgBN,SCyBtBO,eAZS,SAACC,GACvB,MAAO,CACLC,MAAOD,EAAMC,UAIU,SAACX,GAC1B,MAAO,CACLF,UAAW,SAACC,GAAD,OAAiBC,EAASY,EAAkBb,QAI5CU,EAlCD,SAAClB,GAEb,IAAMS,EAAWa,cAcjB,OAZAC,qBAAU,WAGR,IAAMf,EAASgB,aAAG,4BAIlB,OAFAf,EAASY,EAAkBb,IAEpB,WACLI,QAAQC,IAAI,oBAEb,IAGD,mDCTWY,EARH,WACV,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCLAC,EAAY,CACdN,MAAO,IAmBIO,EAhBC,WAAqC,IAApCR,EAAmC,uDAA3BO,EAAWE,EAAgB,uCAChD,OAAQA,EAAOd,MACX,KAAKC,EAED,MAAO,CACHK,MAAOQ,EAAOZ,aAGtB,KAAKD,EAGL,QACI,OAAOI,ICRbU,EAAmBC,IAEnBC,EAAcC,YAAgB,CAClCZ,MAAOa,IAGHC,EAAQC,YAAYJ,EAAaF,EACrCO,YAAgBC,OAGZZ,EACJ,cAAC,IAAD,CAAUS,MAAOA,EAAjB,SACE,cAACI,EAAD,MAIJC,IAASC,OACPf,EACAgB,SAASC,eAAe,W","file":"static/js/main.639f6dcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"layout_Layout__76aiX\"};","import React, { Fragment } from 'react';\r\n\r\nimport classes from './layout.module.scss';\r\n\r\nconst layout = (props: any) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <header>\r\n                by Rafa≈Ç Adamski &copy; 2020\r\n            </header>\r\n            <main className={classes.Layout}>\r\n                {props.children}\r\n            </main>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default layout;","export const INIT_CHAIN = 'INIT_CHAIN';\r\nexport const SET_BLOCK = 'SET_BLOCK';","import * as actionTypes from './actionTypes';\r\n\r\n\r\nconst loadChainAction = (res: any) => (\r\n    {\r\n        type: actionTypes.INIT_CHAIN,\r\n        loadedChain: res\r\n    }\r\n)\r\n\r\nexport const loadChain = (socket: any) => {\r\n    return (dispatch: any) => {\r\n        socket.on('loadChain', (res: any) => {\r\n            console.log('loading chain response');\r\n            dispatch(loadChainAction(res));\r\n        });\r\n    }\r\n}\r\n\r\n//updating chain - set block","import React, {useEffect} from 'react';\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport {io} from 'socket.io-client';\r\nimport * as actions from '../store/actions/index';\r\n\r\nconst Chain = (props: any) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n\r\n    //socket connection\r\n    const socket = io('http://192.168.0.17:8000');\r\n\r\n    dispatch(actions.loadChain(socket));\r\n\r\n    return () => {\r\n      console.log('chain cleanup');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>this is chain</div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    chain: state.chain\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    loadChain: (socket: any) => dispatch(actions.loadChain(socket))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chain);\r\n","import React from 'react';\n\nimport Layout from './hoc/layout/layout';\nimport Chain from './containers/Chain';\n\nconst app = () => {\n  return (\n    <Layout>\n      <Chain></Chain>\n    </Layout>\n  );\n}\n\nexport default app;\n","import { act } from 'react-dom/test-utils';\r\nimport * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initState = {\r\n    chain: []\r\n}\r\n\r\nconst reducer = (state = initState, action: any) => {\r\n    switch (action.type) {\r\n        case actionTypes.INIT_CHAIN: {\r\n\r\n            return {\r\n                chain: action.loadedChain\r\n            }\r\n        }\r\n        case actionTypes.SET_BLOCK: {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { create } from 'domain';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport chainReducer from './store/reducers/chain';\n\n\nconst composeEnhancers = compose;\n\nconst rootReducer = combineReducers({\n  chain: chainReducer\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}